<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员学习之路</title>
    <link>https://www.zhouyi.tech/</link>
    <description>Recent content on 程序员学习之路</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 31 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.zhouyi.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Categories</title>
      <link>https://www.zhouyi.tech/categories/_index.en/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/categories/_index.en/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Series</title>
      <link>https://www.zhouyi.tech/series/_index.en/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/series/_index.en/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://www.zhouyi.tech/tags/_index.en/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/tags/_index.en/</guid>
      <description></description>
    </item>
    
    <item>
      <title>投资交易的心理建设 # 组合月报(202010)</title>
      <link>https://www.zhouyi.tech/money/passive-income-protfolio/202010/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/passive-income-protfolio/202010/</guid>
      <description>组合月报 本月净值：1.446。
本月操作：本月买入4笔，无卖出操作。
组合详情：投资标的：各类ETF，包括宽基指数、行业指数等；投资市场：中国、香港及美国。
资金管理：分散投资，买入标的单个不超过总资金20%，单个标持仓市值不超过总资金30%；高估值标的买入采用非估值买入策略如趋势跟随或突破等交易策略且总市值占比不超过30%；单个高估值标的止损点为10%且总止损额每月不超过总市值2%*30%即0.6%。
三地市场分析 本月初期一波暴涨，之后快速回落，市场宽幅震荡整理。这种行情下很容易产生亏损，因为初期的暴涨让人产生市场向上突破的幻觉，很容易产生加仓行为，之后又快速暴跌回去，如果没有前期很高的利润空间，可能已经产生小幅度的亏损了。当然从中长期看，整个市场的底部空间不断上提，整体趋势还是向上的。
我们的组合持有不少的中证500，还有一些红利ETF，这些虽然估值低，但是在下跌中跌幅却并不小。不过长期看，目前的估值处于中部区间，风险不高。对于高估值的标的，在市场中后期，表现的总是很强势，快速暴涨中幅下跌时有发生，这时一定不要产生倒金字塔加仓的行为，很容易产生大幅度亏损。之所以要持有中低估值的标的，是为了吃估值回归的涨幅空间。
双均线策略信号 从双均线交易信号看，目前大多数指数基金都处于持仓仓位，但是由于市场处于震荡整理行情，所以双均线会出现短期买入并卖出的信号干扰。
 想接受每日ETF指数基金双均线交易信号提醒，可在此订阅: Invest Alchemy
 投资交易的心理建设 如果把投资交易最重要的几个方面排个序，那我的答案是：
 交易心理 交易系统 其他（市场/投资标的/交易策略/“内幕”消息等）  新手喜欢听消息交易，老手喜欢遵从系统规则交易。初入股市的新手最喜欢听从周围一些从交易中盈利很多的“高手”提供的小道消息，因为市场充满了不确定性，而人的本能确实需要确定性的东西。市场是个充满魔力的地方，会在短时间让参与其中的人在希望、恐惧、贪心与绝望的心理中来回切换。
以上的几种心理效应是最常见的：
 处置效应 损失厌恶 沉没成本 结果偏好 近期偏好 锚定效应 潮流效应 小数定律 预测未来  我们可以从很多股票交流群看到以上几种效应的出现，比如以下场景：
 我在XXX上已经赚了20%了，涨幅太高了，得赶紧卖掉。另外一个还被套着呢，继续拿着等回本。（处置效应） A和B两个标的，A买入后可能的损失是10%，盈利可能是50%，B买入后可能的损失是5%，盈利是10%。大部分人可能会选B，或者选了A在A亏损超过5%的时候止损卖掉了。（损失厌恶） 这个股票最近两年涨幅了10倍，我使用这种策略都赚了5倍了，这种策略肯定是最好的，这个股票也会继续大涨！（结果偏好/近期偏好） 大家都买这个理财产品，肯定没问题的。（潮流效应） 这个公司券商最近的研报分析利润会大涨，新闻里也提到了二季度利润可能大增，所以加仓买吧！（锚定效应/小数定律） 特普朗会连任，美股要大涨，港股和A股也会跟着大涨的，赶紧加杠杆！（预测未来）  如果说交易系统是个外功的话，那么交易心理就是内功，如果内功不行，再好的外功也无法发挥好的效果。
如何训练好的交易心理？一方面需要我们对以上的心理效应做相应的克制，另外一方面需要发觉自己的性格特点，以自己的性格特点构建合适的交易系统，这样才能在市场中长期活下去。
组合表现  组合自2018年09月开启至今：
沪深300自3310.13点到4695.33点，涨幅31.87%；
香港恒指自26435.67点到24107.42点，涨幅-8.81%；
标普指数自2930.75点到3269.96点，涨幅11.57%；
本投资组合净值从1到 1.446，涨幅 44.6%。
 组合持仓 关于组合的历史表现详见: 被动收入投资组合</description>
    </item>
    
    <item>
      <title>大跌时我们能做什么 # 组合月报(202009)</title>
      <link>https://www.zhouyi.tech/money/passive-income-protfolio/202009/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/passive-income-protfolio/202009/</guid>
      <description>组合月报 本月净值：1.45。
本月操作：本月无买入操作，卖出两笔。
组合详情：投资标的：各类ETF，包括宽基指数、行业指数等；投资市场：中国、香港及美国。
资金管理：分散投资，买入标的单个不超过总资金20%，单个标持仓市值不超过总资金30%；高估值标的买入采用非估值买入策略如趋势跟随或突破等交易策略且总市值占比不超过30%；单个高估值标的止损点为10%且总止损额每月不超过总市值2%*30%即0.6%。
三地市场分析 本月市场大幅回调。三地市场宽基指数均产生了超过5%的下跌，市场在经历很高的涨幅且横盘一段时间后终于选择了向下的方向。
从申万一级行业板块月涨跌幅看，本月大多数板块产生了超过5%的跌幅，这也和市场的跌幅差不多。
虽然我们的组合跌幅近5%，但是相比市场主流指数，跌幅还算小的，这主要源于仓位从满仓降到九成仓位。
双均线策略信号 从双均线交易信号看，目前大多数指数基金都处于空仓仓位，如果你采用此交易策略，那可以躲过这次大的跌幅。
 想接受每日ETF指数基金双均线交易信号提醒，可在此订阅: Invest Alchemy
 大跌时我们能做什么 很多新手在遇到大跌时都很恐慌，想要卖出可能已经被套牢了，出现这种原因很可能是因为买入价过高导致浮盈太少，稍微大的跌幅就抹掉了之前所有的盈利。解决这个问题好的办法是不要以过高的价格买入，要在市场低谷的时候买入。这里的难点在于如何判断市场当前的位置：牛市？熊市？震荡市？很多时候市场的走势并不明朗，处于市场里交易的人很难判断短期市场的走势，当大跌出现时，交易者很容易产生自我怀疑，在大涨时很容易出现幻觉。
想要克服这个难题，我们需要构建自己的交易系统，设立严格的买入卖出机制与资金管理机制。比如双均线策略交易系统里双均线金叉死叉的出现就是买入卖出的信号，它的资金管理机制（仓位控制）可以是全仓交易。而采取估值交易策略的交易系统，估值水位线的变化一方面决定了买入卖出信号，另外一方面也决定了仓位控制，比如在水位线高位我们的仓位会逐渐降低，反之逐渐升高。
当你拥有一套能正向的交易系统时，市场的涨跌已经不是一个影响因素，你也无需猜测市场每天的走势，只需要按照交易系统制定交易计划。如果是一个中长期交易系统，操作单位可能以月计，无论市场是涨是跌，都可以从容应对。
以被动收入投资组合为例，我们采用了估值+双均线交易的策略，虽然本月大跌，但是组合持仓大多数都是中低估值的标的，高估值的标的我们也按照双均线交易策略逐步降低仓位。假设未来市场在几个月内近一步下跌，我们也无需担心，这只是市场给我们买入更多低估值的标的。当市场大涨时，我们也会采取高估值双均线交易的策略来逐步降低仓位。
组合表现  组合自2018年09月开启至今：
沪深300自3310.13点到4587.4点，涨幅38.59%；
香港恒指自26435.67点到 23506.871点，涨幅 -11.09%；
标普指数自2930.75点到 3335.47点，涨幅 13.81 %；
本投资组合净值从1到 1.45，涨幅 45%。
 组合持仓 关于组合的详细信息见: 被动收入投资组合</description>
    </item>
    
    <item>
      <title>双均线交易策略 # 组合月报(202008)</title>
      <link>https://www.zhouyi.tech/money/passive-income-protfolio/202008/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/passive-income-protfolio/202008/</guid>
      <description>双均线策略  双均线策略，通过建立m天移动平均线，n天移动平均线，则两条均线必有交点。若m&amp;gt;n，n天平均线“上穿越”m天均线则为买入点，反之为卖出点。该策略基于不同天数均线的交叉点，抓住股票的强势和弱势时刻，进行交易。
由时间短的均线在下方向上穿越时间长一点的均线，为“金叉”，反之为“死叉”。我们认为，双均线金叉的时候，表明股票很强势，反之很弱势，我们就在强势的时候买一个好了，弱势的时候卖掉好了。
  此标的从2005年开始至2020年共交易90次
双均线策略总收益率为: 1000.79%
基准(买入一直持有)的收益率为：2269.94%
  此标的从2010年开始至2020年共交易59次
双均线策略总收益率为: 362.01%
基准(买入一直持有)的收益率为：187.23%
 想知道以上标的是哪个指数，双均线策略在指数上表现如何？哪个指数长期表现（15年区间）最牛？双均线策略优缺点有哪些？如何在投资中运用双均线策略提高投资收益？那就来看本期视频吧。
相关视频 YouTube   bilibili  .aspect-ratio { position: relative; width: 100%; height: 0; padding-bottom: 75%; margin-bottom: 20px; } .aspect-ratio iframe { position: absolute; width: 100%; height: 100%; left: 0; top: 0; }    相关工具 看完以上视频后如果觉得双均线交易策略还不错的话，那么你可能需要这个工具：
Invest Alchemy
当你邮件订阅后，这个工具会在每日8点时给你发送昨日的指数 ETF 双均线交易信号，邮件格式如下：
交易信号涉及了宽基指数和行业指数，共47个指数 ETF 基金。此工具未来可能会加入如下功能：
 ETF折溢价率 市场热度评分 指数历史市盈率 投资好文推荐  组合月报  组合已运行两周年</description>
    </item>
    
    <item>
      <title>不懂数据库索引的底层原理？那是因为你心里没点b树</title>
      <link>https://www.zhouyi.tech/archives/%E4%B8%8D%E6%87%82%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%82%A3%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%BD%A0%E5%BF%83%E9%87%8C%E6%B2%A1%E7%82%B9b%E6%A0%91/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E4%B8%8D%E6%87%82%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%82%A3%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%BD%A0%E5%BF%83%E9%87%8C%E6%B2%A1%E7%82%B9b%E6%A0%91/</guid>
      <description>前几天下班回到家后正在处理一个白天没解决的bug，厕所突然传来对象的声音： 对象：xx，你有《时间简史》吗？ 我：我去！妹子，你这啥癖好啊，我有时间也不会去捡屎啊！ 对象：&amp;hellip;人家说的是霍金的科普著作《时间简史》，是一本书啦！ 我：哦，那我没有&amp;hellip; 对象：人家想看诶，你明天帮我去图书馆借一本吧&amp;hellip; 我：我明天还要改&amp;hellip; 对象：你是不是不爱我了，分手！ 我：我一大早就去~
 第二天一大早我就到了图书馆，刚进门就看到一个索引牌，标识着不同楼层的功能，这样我很快能定位到我要找的目标所在的楼层了。
  我到楼上后又看到每排的书架上又对书的分类进行了细分，这样我能更快的定位到我要找的书具体在哪个书架！
 并且每个楼层都有一台查询终端，输入书名就能查到对应的唯一标识“索书号”，类似于P159-49/164这样的一个编码，书架上的书都是按照这个编码进行排序的！有了这个编码再去对应的书架上，很快就能找到对应的书在书架的具体位置了。
 不到十分钟，我就从图书馆借好书出来了。
 这么大的图书馆，我为什么能在这么短的时间内找到我要的书？如果这些书是杂乱无章的堆放，或者没有任何标识的放在书架，我还能这么快的找到吗？
 这不禁让我想到了我们开发中用到的数据库，图书馆的书就类似我们数据表中的数据，楼层索引牌、书架分类标识、索书号就类似我们查找数据的索引。
 那我们常用的数据库的索引底层的一个数据结构是什么样的呢？想到这里我又回到图书馆借了一本《数据库从入门到放弃》！
 要了解数据库索引的底层原理，我们就得先了解一种叫树的数据结构，而树中很经典的一种数据结构就是二叉树！所以下面我们就从二叉树到平衡二叉树，再到B-树，最后到B+树来一步一步了解数据库索引底层的原理！
二叉树（Binary Search Trees）  二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。二叉树有如下特性：
 1、每个结点都包含一个元素以及n个子树，这里0≤n≤2。 2、左子树和右子树是有顺序的，次序不能任意颠倒。左子树的值要小于父结点，右子树的值要大于父结点。
  光看概念有点枯燥，假设我们现在有这样一组数[35 27 48 12 29 38 55]，顺序的插入到一个数的结构中，步骤如下  好了，这就是一棵二叉树啦！我们能看到，经通过一系列的插入操作之后，原本无序的一组数已经变成一个有序的结构了，并且这个树满足了上面提到的两个二叉树的特性！
 但是如果同样是上面那一组数，我们自己升序排列后再插入，也就是说按照[12 27 29 35 38 48 55]的顺序插入，会怎么样呢？
 由于是升序插入，新插入的数据总是比已存在的结点数据都要大，所以每次都会往结点的右边插入，最终导致这棵树严重偏科！！！上图就是最坏的情况，也就是一棵树退化为一个线性链表了，这样查找效率自然就低了，完全没有发挥树的优势了呢！ 为了较大发挥二叉树的查找效率，让二叉树不再偏科，保持各科平衡，所以有了平衡二叉树！
平衡二叉树 (AVL Trees)  平衡二叉树是一种特殊的二叉树，所以他也满足前面说到的二叉树的两个特性，同时还有一个特性：
 它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
  大家也看到了前面[35 27 48 12 29 38 55]插入完成后的图，其实就已经是一颗平衡二叉树啦。</description>
    </item>
    
    <item>
      <title>Spring Boot 集成 Liquibase</title>
      <link>https://www.zhouyi.tech/archives/spring-boot-%E9%9B%86%E6%88%90-liquibase/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/spring-boot-%E9%9B%86%E6%88%90-liquibase/</guid>
      <description>Liquibase 是一个用于跟踪、管理和应用数据库变化的开源的数据库重构工具。它将所有数据库的变化（包括结构和数据）都保存在 changelog 文件中，便于版本控制，它的目标是提供一种数据库类型无关的解决方案，通过执行 schema 类型的文件来达到迁移。
Liquibase 特性 Liquibase 具备如下特性：
 支持几乎所有主流的数据库，如 MySQL, PostgreSQL, Oracle, Sql Server, DB2 等； 支持多开发者的协作维护； 日志文件支持多种格式，如 XML, YAML, JSON, SQL等； 支持上下文相关逻辑 生成数据库变更文档 支持多种运行方式，如命令行、Spring 集成、Maven 插件、Gradle 插件等。  更多详情介绍，请查阅 Liquibase 官方文档
Spring Boot 集成 Liquibase 添加依赖 因为 Spring Boot 已经内置支持整合 Liquibase，我们只需要在项目工程中引入 Liquibase 的依赖进行配置即可。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.liquibase&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;liquibase-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 配置 application 文件 在 classpath 中配置 application.properties 或 application.yml 文件，
# 启用liquibase liquibase.enabled=true # 存储变化的文件（changelog）位置 liquibase.change-log=classpath:sample_change.sql # 检查存储变化的文件是否存在 liquibase.</description>
    </item>
    
    <item>
      <title>Guava Cache使用总结</title>
      <link>https://www.zhouyi.tech/archives/guava-cache%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/guava-cache%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>缓存分为本地缓存和远端缓存。常见的远端缓存有Redis，MongoDB；本地缓存一般使用map的方式保存在本地内存中。一般我们在业务中操作缓存，都会操作缓存和数据源两部分。如：put数据时，先插入DB，再删除原来的缓存；ge数据时，先查缓存，命中则返回，没有命中时，需要查询DB，再把查询结果放入缓存中 。如果访问量大，我们还得兼顾本地缓存的线程安全问题。必要的时候也要考虑缓存的回收策略。
今天说的 Guava Cache 是google guava中的一个内存缓存模块，用于将数据缓存到JVM内存中。他很好的解决了上面提到的几个问题：
 很好的封装了get、put操作，能够集成数据源 ； 线程安全的缓存，与ConcurrentMap相似，但前者增加了更多的元素失效策略，后者只能显示的移除元素； Guava Cache提供了三种基本的缓存回收方式：基于容量回收、定时回收和基于引用回收。定时回收有两种：按照写入时间，最早写入的最先回收；按照访问时间，最早访问的最早回收； 监控缓存加载/命中情况  Guava Cache的架构设计灵感ConcurrentHashMap，在简单场景中可以通过HashMap实现简单数据缓存，但如果要实现缓存随时间改变、存储的数据空间可控则缓存工具还是很有必要的。Cache存储的是键值对的集合，不同时是还需要处理缓存过期、动态加载等算法逻辑，需要额外信息实现这些操作，对此根据面向对象的思想，还需要做方法与数据的关联性封装，主要实现的缓存功能有：自动将节点加载至缓存结构中，当缓存的数据超过最大值时，使用LRU算法替换；它具备根据节点上一次被访问或写入时间计算缓存过期机制，缓存的key被封装在WeakReference引用中，缓存的value被封装在WeakReference或SoftReference引用中；还可以统计缓存使用过程中的命中率、异常率和命中率等统计数据。
构建缓存对象 我们先看一个示例，再来讲解使用方式：
package com.rickiyang.learn.cache; import com.google.common.cache.CacheBuilder; import com.google.common.cache.CacheLoader; import com.google.common.cache.LoadingCache; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Random; import java.util.concurrent.TimeUnit; /** * @author: rickiyang * @date: 2019/6/12 * @description: */ public class GuavaCacheService { public void setCache() { LoadingCache&amp;lt;Integer, String&amp;gt; cache = CacheBuilder.newBuilder() //设置并发级别为8，并发级别是指可以同时写缓存的线程数  .concurrencyLevel(8) //设置缓存容器的初始容量为10  .initialCapacity(10) //设置缓存最大容量为100，超过100之后就会按照LRU最近虽少使用算法来移除缓存项  .maximumSize(100) //是否需要统计缓存情况,该操作消耗一定的性能,生产环境应该去除  .recordStats() //设置写缓存后n秒钟过期  .</description>
    </item>
    
    <item>
      <title>Zookeeper学习实践 </title>
      <link>https://www.zhouyi.tech/archives/zookeeper%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/zookeeper%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/</guid>
      <description>内含Curator以及Watcher操作demo，基于zookeeper实现的分布式锁demo 1.发展需求
2.什么是zookeeper？
3.zookeeper的安装部署(集群)
4.zookeeper的数据特点
5.zookeeper的集群
6.ZAB协议
7.Leader选举
8.事件机制
1.发展需求 在分布式架构下，当服务越来越多，规模越来越大时，对应的机器数量也越来越大，单靠人工来管理和维护服务及地址的配置地址信息会越来越困难，单点故障的问题也开始凸显出来，一旦服务路由或者负载均衡服务器宕机，依赖他的所有服务均将失效。
此时，需要一个能够动态注册和获取服务信息的地方，来统一管理服务名称和其对应的服务器列表信息，称之为服务配置中心。
服务提供者在启动时，将其提供的服务名称、服务器地址注册到服务配置中心，服务消费者通过服务配置中心来获得需要调用的服务的机器列表。通过相应的负载均衡算法，选取其中一台服务器进行调用。
当服务器宕机或者下线时，相应的机器需要能够动态地从服务配置中心里面移除，并通知相应的服务消费者，否则服务消费者就有可能因为调用到已经失效服务而发生错误。在这个过程中，服务消费者只有在第一次调用服务时需要查询服务配置中心，然后将查询到的信息缓存到本地，后面的调用直接使用本地缓存的服务地址列表信息，而不需要重新发起请求道服务配置中心去获取相应的服务地址列表，直到服务的地址列表有变更(机器上线或者下线)。
2.什么是zookeeper？ zookeeper是一个开源的分布式协调中间件，由雅虎公司创建，是google chubby的开源实现。zookeeper的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，并且以一些列简单易用的接口提供给用户使用。实现了负载均衡，分布式锁等功能。
3.zookeeper的安装部署(集群) 下载 zookeeper 安装包: http://apache.fayea.com/zookeeper/ 下载完成，通过 tar -zxvf 解压
 常用命令
1.启动ZK服务:
bin/zkServer.sh start
2.查看 ZK 服务状态:
bin/zkServer.sh status
3.停止 ZK 服务:
bin/zkServer.sh stop
4.重启 ZK 服务:
bin/zkServer.sh restart
5.连接服务器
zkCli.sh -timeout 0 -r -server ip:port
 初次使用zookeeper，需要将conf目录下的zoo_sample.cfg文件copy一份重命名为zoo.cfg,修改dataDir目录，dataDir表示日志文件存放的路径。
在 zookeeper 集群中，各个节点总共有三种角色，分别是: leader，follower，observer
集群模式我们采用模拟 3 台机器来搭建 zookeeper 集群。 分别复制安装包到三台机器上并解压，同时 copy 一份 zoo.cfg。
  修改配置文件</description>
    </item>
    
    <item>
      <title>投资理财书籍推荐 # 组合月报(202007)</title>
      <link>https://www.zhouyi.tech/money/passive-income-protfolio/202007/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/passive-income-protfolio/202007/</guid>
      <description>三地市场分析 A股 沪深300本月涨12.75%，从结果看涨幅不错，过程看却惊心动魄：其中有两日单日暴跌超4%。如过山车般的行情让不少人关灯吃面，大呼这是一个假牛市。如果你重仓银行股的话，心里更郁闷，似乎牛市不曾来过。因为从申万一级分类银行板块本月只涨了1.02%，但震幅却达21.88%，看着低估值区域的银行股跌了再跌，深深的伤害了价值投资的心。
总之，这不是一个全面牛，最多算一个结构牛。
香港 恒生指数本月涨0.69%，三大市场最惨，组合持有近20%的香港市场标的，这进一步拖累了组合表现。从估值的角度讲，恒生指数目前在中部区域，还是值得中长期持有的。
美股 标普500本月涨5.51%，纳斯达克100涨7.37%，组合持有超10%的美股市场标的。从估值的角度讲，美股市场估值非常高，投资价值很低，组合持有的大多是中概股，其中有些是香港市场的。
被动收入投资组合 组合表现  组合自2018年09月开启至今：
沪深300自3310.13点到4695.05点，涨幅41.84%；
香港恒指自26435.67点到24595.35点，涨幅-6.96%；
标普指数自2930.75点到3271.12点，涨幅11.61%；
本投资组合净值从1到1.48，涨幅48%。
 组合交易策略 分散投资，买入标的单个不超过总资金20%，单个标持仓市值不超过总资金30%；
高估值标的买入采用非估值买入策略如趋势跟随或突破等交易策略且总市值占比不超过30%；
单个高估值标的止损点为10%且总止损额每月不超过总市值2%*30%即0.6%。
组合持仓 组合行业配置 中国市场 香港市场 美国市场 相关视频 本期视频会分析组合与市场的本月投资表现，也会推荐一些投资理财入门书籍，详见视频内分享。
YouTube   bilibili  .aspect-ratio { position: relative; width: 100%; height: 0; padding-bottom: 75%; margin-bottom: 20px; } .aspect-ratio iframe { position: absolute; width: 100%; height: 100%; left: 0; top: 0; }    </description>
    </item>
    
    <item>
      <title>并发编程总结分析</title>
      <link>https://www.zhouyi.tech/archives/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/</guid>
      <description>并发编程总结分析  什么情况下应该使用多线程  tomcat7以前的IO模型   如何应用多线程  继承Thread类创建线程 实现Runnable接口创建线程 实现Callable接口通过FutureTask包装器来创建Thread线程   如何把多线程用得更加优雅 Java并发编程的基础  线程的状态 通过代码演示线程的状态 通过相应命令显示线程状态   线程的停止  interrupt方法 Thread.interrupted 其他的线程复位 volatile标志位停止线程   线程的安全性问题  CPU高速缓存   缓存一致性问题  总线锁 缓存锁 缓存一致性协议 并发编程的问题   Java内存模型 JMM怎么解决原子性、可见性、有序性的问题? volatile如何保证可见性  volatile防止指令重排序 多核心多线程下的指令重排影响   内存屏障  从CPU层面来了解一下什么是内存屏障 编译器层面如何解决指令重排序问题   volatile为什么不能保证原子性 synchronized的使用 synchronized的锁的原理 synchronized的锁升级和获取过程 wait和notify  wait和notify的原理   同步锁 Lock的初步使用  ReentrantLock ReentrantReadWriteLock   Lock和synchronized的简单对比 AQS  AQS的内部实现   ReentrantLock的实现原理分析  非公平锁的实现流程时序图   ReentrantLock源码分析 公平锁和非公平锁的区别 Condition源码分析 CountDownLatch CountDownLatch源码分析 Semaphore Semaphore源码分析 原子操作 线程池  线程池的使用 submit和execute的区别   ThreadpoolExecutor  newFixedThreadPool newCachedThreadPool newSingleThreadExecutor 饱和策略 合理的配置线程池 线程池的关闭 线程池的监控   线程池的源码分析  线程数量和线程池状态管理 execute   线程池执行流程图  什么情况下应该使用多线程 线程出现的目的是什么？解决进程中多任务的实时性问题？其实简单来说，也就是解决“阻塞”的问题，阻塞的意思就是程序运行到某个函数或过程后等待某些事件发生而暂时停止 CPU 占用的情况，也就是说会使得 CPU 闲置。还有一些场景就是比如对于一个函数中的运算逻辑的性能问题，我们可以通过多线程的技术，使得一个函数中的多个逻辑运算通过多线程技术达到一个并行执行，从而提升性能。</description>
    </item>
    
    <item>
      <title>200万小目标 # 组合月报(202006)</title>
      <link>https://www.zhouyi.tech/money/passive-income-protfolio/202006/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/passive-income-protfolio/202006/</guid>
      <description>个人收入三驾马车 大到国家，经济学上常把投资、消费、出口比喻为拉动GDP增长的“三驾马车”（从支出角度看，GDP是最终需求─投资、消费、净出口这三种需求之和），这是对经济增长原理最生动形象的表述。1
小到个人，我们的收入模型也可以分为主业、副业与投资。
主业 主业是大多数人主要的收入来源，我们投入十几年时间学习并投身工作，为的就是打造一条高效的时间到金钱之路，所以社会才有了各种职业划分，如工程师、医生、教师、销售、程序员与公务员等职业类别。
不同的职业转化时间到金钱的效率和稳定性是不同的，这其中不仅和个人的奋斗相关，更和历史的进程相关。
在2005年前，一些非计算机工程师还是非常热门的职业。而在这之后，软件工程师又开始变的很火，但如公务员、医生和教师，一直是很热门的选择。软件行业变的热门说明其转化时间到钱的速度非常高效，所以一些冷门专业如数学和物理系都开始转行做程序员了。
除了效率是大家的优选之外，稳定性也是非常重要的因素，能高效转化但是稳定性不好的如创业这种高风险高回报的职业做的人并不多。
“男怕入错行，女怕嫁错郎”，如果一个人选择了一份低效或不稳定的职业，除了以极高成本换职业外，他可能还会选择搞搞第二职业，这就是副业的来源。
副业 最好的副业就是在主业之外延伸的带有一定未知性风险的职业了，如工程师做个人作品或项目商业变现，咨询师在业余时间做独立咨询，老师搞周末培训班等。如果主业不适合搞副业，那还是有适合的如微商、做中间人牵线、薅羊毛或外包，前两者是人脉资源变现，后两者是个人时间变现。
好的副业不仅可以与主业相辅相成，同时还带有时间杠杆。如你是一个程序员或运营，那么做个人作品或搞新媒体运营就是不错的选择，因为其既可以提升你的主业同时也带有时间杠杆。相反，外包和薅羊毛大部分没有时间杠杆，无法躺着赚钱。
投资 当主业和副业替我们积累了一定财富的时候，如果仅仅将钱放入银行任由其被不断的通货膨胀收割，那相当于没有守住革命的胜利果实。
提高自己的投资能力是一项我们不得不做的事情。根据木桶原理，我们擅长的主业和副业在一定年龄如35岁之后，不断投入时间提升的性价比越来越低。一些大前期职业如软件工程师到了40岁后很难找到合适的公司养老，这意味着主业现金流的消亡，所以得依靠副业和投资的增长来满足我们生活所需的现金流。
如果以金融的视角来看待主业的话，一份年收入30万的职业（普通职业的天花板是50万）以10%的折现率计算的话相当于现值300万的现金，以15%、20%的折现计算分别等价于200万和150万。如果你的投资年复合增长率可以到15%的话，当持有200万现金的时候，相当于你多了一份年薪30万的主业。
所以巧妙的地方在于，你可以通过前期主业和副业的收入积累资金，等主业或副业收入逐渐消亡的时候，通过投资再造一个主业现金流源。更重要的是，这个现金流源还是被动的，可以让你躺着赚钱。
所以现在的问题在于，如何通过主业和副业积累200万长期投资现金并达到年复合增长率15%的小目标？
这个问题可以拆解为两个阶段，第一个阶段积累可投资资金，第二个阶段进行长期投资。
200万可投资资金看起来是笔很难积攒的本金，但是我们换一个角度去思考，比如当你30岁开始做这个规划，假设主业到45岁时开始大幅度衰退，我们的长期投资时间是15年，以15%的投资收益计算，初始本金只需要25万（25*1.15^15=203），也就意味着如果你30岁开始长期投资并且年复合投资收益率达15%，则只需要25万本金，15年后变成203万。
30岁/25万/15年，看起来是个可实现的小目标了。
剩下最后一个问题是，什么投资标的及相关的投资策略、交易系统，可以长期达到15%的年收益率？
200万小目标的投资标的及投资策略分析 买房 25万的投资本金，首付假设30%，总价能买75万元的房子。以中国发展门户网这篇《2005年北京房价大幅上涨近20%》提到的7392元为例，2020年以安居客发布的《2020年北京房价》中7月的最新价57690元为例，这套房子目前价值585万。
15年时间升值近780%，年复合回报增长率为14.7%。25万以780%计算收益率为195万左右，但是加上房子3.33倍的杠杆，直接导致这套房子最终的收益远超200万。
这里面展示了房产投资两个巧妙的地方，一个是长期投资，一个是低息杠杆。
当然最重要的是这个城市是北京。
买房就是买城市发展。
放在现在来看，房产从大周期的角度以及国家发布的“房住不炒”的指导政策，房产投资很难复现这15年辉煌的历程，更不要说我们普通人也很难参与其中。
买彩票 六合彩票中头等奖的概率只有一千四百万分之一，即使是选号范围小一些的彩票，中到头等奖的概率一般也要五百万分之一。
做生意 以我有限的创业经历来看，创业是一项比难更难的事情，上班相对来说不要更简单。以网上查询到的数据看，大体可以认为个人创业成功的概率在1%左右。不过就算创业从概率上看也比买彩票靠谱。
金融投资 金融投资里我们这里指的范围是股票类，其他复杂的如期货、期权不在这里讨论。
美股 长期金融投资的大师级人物就是巴菲特了，老巴的金融投资收益率如下图：
我们再看看美股150年的回报率分析：
从上图中可以看出，以自然年为周期的收益测算中存在非常显著的波动性，事实上如果随机选择一年入市，有很大概率会遭遇亏损。然而，当投资周期提高至5年、10年，甚至是20年时，亏损情况得到了较明显的控制。特别需要指出，当收益周期提高到20年时，没有任何一期投资的结果是亏损的。2
以上是对通货膨胀进行调整后的收益率计算，如果将分红和通胀算上，美股的平均收益率可到10%以上。
A股 如果以A股中证500指数近15年的收益率进行计算，中证500指数从05年的1000点开始到15年的最高11616点，10年11倍(年复合回报28%)，但是再多持有5年到15年的话收益率只有5.8倍了(年复合回报12%多)。
当然有人会说了，上证指数很垃圾，如果买了肯定血亏，那我们就以上证指数自上市以来到现在的回报做个简单分析：
上证指数91年从100点到2020年7月的3104点，近30年31倍的回报，年复合回报率为12%。
买股票是买公司，买指数是买国运。
长期投资 无论是美股还是A股，如果短期投资的话，风险很高，很容易出现大幅度的亏损，如果以长期投资5-10年甚至20年的周期看，股票的风险很低，年复合增长率绝对称得上是普通人最佳的投资工具了。
回到问题的开始，什么投资标的及相关的投资策略、交易系统，可以长期达到15%的年收益率？
这里我给出我的答案，长期投资ETF指数基金。如果做长周期的估值波段，收益率达到15%不是难事。从房产投资的启示中我们可以看出低息长期杠杆对收益率的影响很大。
既然给出了答案，理论上可行的事情，为什么不实践呢？
知易行难，知行合一。要真正做到这点不是一件简单的事情。但是我还是做了。
被动收入投资组合 被动收入投资组合是一个已经被我运作了近两年的实盘投资组合，截止到2020年6月底的年复合回报率是17%多。今年我快30岁了，刚好这个组合的投资本金经过加入3倍的低息杠杆目前本金已经超过了25万，计划以10-15年的时间做长期投资ETF指数基金，期望长期回报率超过15%。
每个月我都会在这个Portfolio 页面发布最新的投资组合净值及这个月的交易记录，如果你对这个十年/十五年之约感兴趣，可以在这个页面持续关注。为了让这个过程不是太寂寞，我每个月都会在我的YouTube /Bilibili 频道发布该组合的详细交易信息及对这些交易的思考，当然也会有一些投资的干货在内。
YouTube   bilibili  .aspect-ratio { position: relative; width: 100%; height: 0; padding-bottom: 75%; margin-bottom: 20px; } .</description>
    </item>
    
    <item>
      <title>解读 java 并发队列 BlockingQueue</title>
      <link>https://www.zhouyi.tech/archives/%E8%A7%A3%E8%AF%BB-java-%E5%B9%B6%E5%8F%91%E9%98%9F%E5%88%97-blockingqueue/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E8%A7%A3%E8%AF%BB-java-%E5%B9%B6%E5%8F%91%E9%98%9F%E5%88%97-blockingqueue/</guid>
      <description>最近得空，想写篇文章好好说说 java 线程池问题，我相信很多人都一知半解的，包括我自己在仔仔细细看源码之前，也有许多的不解，甚至有些地方我一直都没有理解到位。
说到线程池实现，那么就不得不涉及到各种 BlockingQueue 的实现，那么我想就 BlockingQueue 的问题和大家分享分享我了解的一些知识。
本文没有像之前分析 AQS 那样一行一行源码分析了，不过还是把其中最重要和最难理解的代码说了一遍，所以不免篇幅略长。本文涉及到比较多的 Doug Lea 对 BlockingQueue 的设计思想，希望有心的读者真的可以有一些收获，我觉得自己还是写了一些干货的。
本文直接参考 Doug Lea 写的 Java doc 和注释，这也是我们在学习 java 并发包时最好的材料了。希望大家能有所思、有所悟，学习 Doug Lea 的代码风格，并将其优雅、严谨的作风应用到我们写的每一行代码中。
目录：
BlockingQueue  开篇先介绍下 BlockingQueue 这个接口的规则，后面再看其实现。
 首先，最基本的来说， BlockingQueue 是一个先进先出的队列（Queue），为什么说是阻塞（Blocking）的呢？是因为 BlockingQueue 支持当获取队列元素但是队列为空时，会阻塞等待队列中有元素再返回；也支持添加元素时，如果队列已满，那么等到队列可以放入新元素时再放入。
BlockingQueue 是一个接口，继承自 Queue，所以其实现类也可以作为 Queue 的实现来使用，而 Queue 又继承自 Collection 接口。
BlockingQueue 对插入操作、移除操作、获取元素操作提供了四种不同的方法用于不同的场景中使用：1、抛出异常；2、返回特殊值（null 或 true/false，取决于具体的操作）；3、阻塞等待此操作，直到这个操作成功；4、阻塞等待此操作，直到成功或者超时指定时间。总结如下：
    Throws exception Special value Blocks Times out     Insert add(e) offer(e) put(e) offer(e, time, unit)   Remove remove() poll() take() poll(time, unit)   Examine element() peek() not applicable not applicable    BlockingQueue 的各个实现都遵循了这些规则，当然我们也不用死记这个表格，知道有这么回事，然后写代码的时候根据自己的需要去看方法的注释来选取合适的方法即可。</description>
    </item>
    
    <item>
      <title>一行一行源码分析清楚 AbstractQueuedSynchronizer (三)</title>
      <link>https://www.zhouyi.tech/archives/%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9A-abstractqueuedsynchronizer-%E4%B8%89/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9A-abstractqueuedsynchronizer-%E4%B8%89/</guid>
      <description>这篇文章是 AQS 系列的最后一篇，第一篇，我们通过 ReentrantLock 公平锁分析了 AQS 的核心，第二篇的重点是把 Condition 说明白，同时也说清楚了对于线程中断的使用。
这篇，我们的关注点是 AQS 最后的部分，AQS 共享模式的使用。有前两篇文章的铺垫，剩下的源码分析将会简单很多。
本文先用 CountDownLatch 将共享模式说清楚，然后顺着把其他 AQS 相关的类 CyclicBarrier、Semaphore 的源码一起过一下。
相对来说，如果读者有前面两篇文章的基础，这篇文章是简单很多，不过对于初学者来说，1 小时估计也是免不了的。
CountDownLatch CountDownLatch 这个类是比较典型的 AQS 的共享模式的使用，这是一个高频使用的类。latch 的中文意思是门栓、栅栏，具体怎么解释我就不废话了，大家随意，看两个例子就知道在哪里用、怎么用了。
使用例子 我们看下 Doug Lea 在 java doc 中给出的例子，这个例子非常实用，我经常会写到这个代码。
假设我们有 N ( N &amp;gt; 0 ) 个任务，那么我们会用 N 来初始化一个 CountDownLatch，然后将这个 latch 的引用传递到各个线程中，在每个线程完成了任务后，调用 latch.countDown() 代表完成了一个任务。
调用 latch.await() 的方法的线程会阻塞，直到所有的任务完成。
class Driver2 { // ...  void main() throws InterruptedException { CountDownLatch doneSignal = new CountDownLatch(N); Executor e = Executors.</description>
    </item>
    
    <item>
      <title>一行一行源码分析清楚 AbstractQueuedSynchronizer (二)</title>
      <link>https://www.zhouyi.tech/archives/%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9A-abstractqueuedsynchronizer-%E4%BA%8C/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9A-abstractqueuedsynchronizer-%E4%BA%8C/</guid>
      <description>文章比较长，信息量比较大，建议在 pc 上阅读。文章标题是为了呼应前文，其实可以单独成文的，主要是希望读者看文章能系统看。
本文关注以下几点内容：
 深入理解 ReentrantLock 公平锁和非公平锁的区别 深入分析 AbstractQueuedSynchronizer 中的 ConditionObject 深入理解 Java 线程中断和 InterruptedException 异常  基本上本文把以上几点都说清楚了，我假设读者看过上一篇文章中对 AbstractQueuedSynchronizer 的介绍 ，当然如果你已经熟悉 AQS 中的独占锁了，那也可以直接看这篇。各小节之间基本上没什么关系，大家可以只关注自己感兴趣的部分。
其实这篇文章的信息量很大，初学者估计至少要 1 小时才能看完，希望本文对得起大家的时间。
公平锁和非公平锁 ReentrantLock 默认采用非公平锁，除非你在构造方法中传入参数 true 。
public ReentrantLock() { // 默认非公平锁  sync = new NonfairSync(); } public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } 公平锁的 lock 方法：
static final class FairSync extends Sync { final void lock() { acquire(1); } // AbstractQueuedSynchronizer.</description>
    </item>
    
    <item>
      <title>一行一行源码分析清楚 AbstractQueuedSynchronizer (一)</title>
      <link>https://www.zhouyi.tech/archives/%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9A-abstractqueuedsynchronizer-%E4%B8%80/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9A-abstractqueuedsynchronizer-%E4%B8%80/</guid>
      <description>&lt;p&gt;在分析 Java 并发包 java.util.concurrent 源码的时候，少不了需要了解 AbstractQueuedSynchronizer（以下简写AQS）这个抽象类，因为它是 Java 并发包的基础工具类，是实现 ReentrantLock、CountDownLatch、Semaphore、FutureTask 等类的基础。&lt;/p&gt;
&lt;p&gt;Google 一下 AbstractQueuedSynchronizer，我们可以找到很多关于 AQS 的介绍，但是很多都没有介绍清楚，因为大部分文章没有把其中的一些关键的细节说清楚。&lt;/p&gt;
&lt;p&gt;本文将从 ReentrantLock 的公平锁源码出发，分析下 AbstractQueuedSynchronizer 这个类是怎么工作的，希望能给大家提供一些简单的帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深度解读 java 线程池设计思想及源码实现</title>
      <link>https://www.zhouyi.tech/archives/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB-java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E5%8F%8A%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB-java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E5%8F%8A%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>我相信大家都看过很多的关于线程池的文章，基本上也是面试的时候必问的，如果你在看过很多文章以后，还是一知半解的，那希望这篇文章能让你真正的掌握好 Java 线程池。
本文一大重点是源码解析，同时会有少量篇幅介绍线程池设计思想以及作者 Doug Lea 实现过程中的一些巧妙用法。本文还是会一行行关键代码进行分析，目的是为了让那些自己看源码不是很理解的同学可以得到参考。
线程池是非常重要的工具，如果你要成为一个好的工程师，还是得比较好地掌握这个知识，很多线上问题都是因为没有用好线程池导致的。即使你为了谋生，也要知道，这基本上是面试必问的题目，而且面试官很容易从被面试者的回答中捕捉到被面试者的技术水平。
本文略长，建议在 pc 上阅读，边看文章边翻源码（Java7 和 Java8 都一样），建议想好好看的读者抽出至少 30 分钟的整块时间来阅读。当然，如果读者仅为面试准备，可以直接滑到最后的总结部分。
总览 开篇来一些废话。下图是 java 线程池几个相关类的继承结构：
先简单说说这个继承结构，Executor 位于最顶层，也是最简单的，就一个 execute(Runnable runnable) 接口方法定义。
ExecutorService 也是接口，在 Executor 接口的基础上添加了很多的接口方法，所以一般来说我们会使用这个接口。
然后再下来一层是 AbstractExecutorService，从名字我们就知道，这是抽象类，这里实现了非常有用的一些方法供子类直接使用，之后我们再细说。
然后才到我们的重点部分 ThreadPoolExecutor 类，这个类提供了关于线程池所需的非常丰富的功能。
另外，我们还涉及到下图中的这些类：
同在并发包中的 Executors 类，类名中带字母 s，我们猜到这个是工具类，里面的方法都是静态方法，如以下我们最常用的用于生成 ThreadPoolExecutor 的实例的一些方法：
public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&amp;lt;Runnable&amp;gt;()); } public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;()); } 另外，由于线程池支持获取线程执行的结果，所以，引入了 Future 接口，RunnableFuture 继承自此接口，然后我们最需要关心的就是它的实现类 FutureTask。到这里，记住这个概念，在线程池的使用过程中，我们是往线程池提交任务（task），使用过线程池的都知道，我们提交的每个任务是实现了 Runnable 接口的，其实就是先将 Runnable 的任务包装成 FutureTask，然后再提交到线程池。这样，读者才能比较容易记住 FutureTask 这个类名：它首先是一个任务（Task），然后具有 Future 接口的语义，即可以在将来（Future）得到执行的结果。</description>
    </item>
    
    <item>
      <title>深入分析 java 8 编程语言规范：Threads and Locks</title>
      <link>https://www.zhouyi.tech/archives/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-java-8-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83threads-and-locks/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-java-8-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83threads-and-locks/</guid>
      <description>2018-02-27
评论区的 xupeng.zhang 提出了一个我之前没碰到过的情况，推翻了我之前的一个错误理解，修改了相应的内容。
2017-11-28
更新了 17.1、17.2、17.3，更正一些不合理的描述，修改一些话术，使读者理解起来更容易，这遍更新下来，这三节应该说已经很严谨了，读者如果还有不懂，请在评论区留言。
2017-11-29
更新 17.4 内存模型一节，修改了一些容易引起歧义的描述
2017-12-11
更新 17.5 及其后面的内容，对于 final 的语义介绍还是不够精彩，字分裂和 double、long 值的非原子处理也基本上不需要关心，所以整体来说，吃力不讨好。
 在 java 并发编程中，线程和锁永远是最重要的概念。语言规范虽然是规范描述，但是其中也有非常多的知识和最佳实践是值得学习的，相信这篇文章还是可以给很多读者提供学习参考的。
本文主要是翻译 + 解释 Oracle《The Java Language Specification, Java SE 8 Edition》的第17章《Threads and Locks》，原文大概30页pdf，我加入了很多自己的理解，希望能帮大家把规范看懂，并且从中得到很多你一直想要知道但是还不知道的知识。
注意，本文在说 Java 语言规范，不是 JVM 规范，JVM 的实现需要满足语言规范中定义的内容，但是具体的实现细节由各 JVM 厂商自己来决定。所以，语言规范要尽可能严谨全面，但是也不能限制过多，不然会限制 JVM 厂商对很多细节进行性能优化。
我能力有限，虽然已经很用心了，但有些地方我真的不懂，我已经在文中标记出来了。
建议分 3 部分阅读。
 将 17.1、17.2、17.3 一起阅读，这里关于线程中的 wait、notify、中断有很多的知识； 17.4 的内存模型比较长，重排序和 happens-before 关系是重点； 剩下的 final、字分裂、double和long的非原子问题，这些都是相对独立的 topic。  Chapter 17. Threads and Locks前言 在 java 中，线程由 Thread 类表示，用户创建线程的唯一方式是创建 Thread 类的一个实例，每一个线程都和这样的一个实例关联。在相应的 Thread 实例上调用 start() 方法将启动一个线程。</description>
    </item>
    
    <item>
      <title>Java 并发基础之内存模型</title>
      <link>https://www.zhouyi.tech/archives/java-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/java-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>很久没更新文章了，对隔三差五过来刷更新的读者说声抱歉。
关于 Java 并发也算是写了好几篇文章了，本文将介绍一些比较基础的内容，注意，阅读本文需要一定的并发基础。
本文的主要目的是让大家对于并发程序中的重排序、内存可见性以及原子性有一定的了解，同时要能准确理解 synchronized、volatile、final 几个关键字的作用。
另外，本文还对双重检查形式的单例模式为什么需要使用 volatile 做了深入的解释。
并发三问题 这节将介绍重排序、内存可见性以及原子性相关的知识，这些也是并发程序为什么难写的原因。
1. 重排序 请读者先在自己的电脑上运行一下以下程序：
public class Test { private static int x = 0, y = 0; private static int a = 0, b =0; public static void main(String[] args) throws InterruptedException { int i = 0; for(;;) { i++; x = 0; y = 0; a = 0; b = 0; CountDownLatch latch = new CountDownLatch(1); Thread one = new Thread(() -&amp;gt; { try { latch.</description>
    </item>
    
    <item>
      <title>CompletableFuture 使用介绍</title>
      <link>https://www.zhouyi.tech/archives/completablefuture-%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/completablefuture-%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>本文安利一个 Java8 的工具 CompletableFuture，这是 Java8 带来的一个非常好用的用于异步编程的类。还没使用过的小伙伴，赶紧用起来吧。
本文不介绍它的实现源码，仅介绍它的接口使用，本文也不做它和 RxJava 等其他异步编程框架的对比。
实例化 首先，不管我们要做什么，我们第一步是需要构造出 CompletableFuture 实例。
最简单的，我们可以通过构造函数来进行实例化：
CompletableFuture&amp;lt;String&amp;gt; cf = new CompletableFuture&amp;lt;String&amp;gt;(); 这个实例此时还没有什么用，因为它没有实际的任务，我们选择结束这个任务：
// 可以选择在当前线程结束，也可以在其他线程结束 cf.complete(&amp;#34;coding...&amp;#34;); 因为 CompletableFuture 是一个 Future，我们用 String result = cf.get() 就能获取到结果了。
 CompletableFuture 提供了 join() 方法，它的功能和 get() 方法是一样的，都是阻塞获取值，它们的区别在于 join() 抛出的是 unchecked Exception。
 上面的代码确实没什么用，下面介绍几个 static 方法，它们使用任务来实例化一个 CompletableFuture 实例。
CompletableFuture.runAsync(Runnable runnable); CompletableFuture.runAsync(Runnable runnable, Executor executor); CompletableFuture.supplyAsync(Supplier&amp;lt;U&amp;gt; supplier); CompletableFuture.supplyAsync(Supplier&amp;lt;U&amp;gt; supplier, Executor executor)  runAsync 方法接收的是 Runnable 的实例，意味着它没有返回值 supplyAsync 方法对应的是有返回值的情况 这两个方法的带 executor 的变种，表示让任务在指定的线程池中执行，不指定的话，通常任务是在 ForkJoinPool.</description>
    </item>
    
    <item>
      <title>10分钟入门Shell脚本编程</title>
      <link>https://www.zhouyi.tech/archives/10%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/10%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</guid>
      <description>前言 写下这篇文章，是对自己在学习和使用过程中的总结，文笔不是很好，如果有什么问题欢迎沟通交流
Shell是什么 Shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务, Shell脚本（shell script），是一种为Shell编写的脚本程序。我们经常说的shell通常都是指shell脚本。
环境和工具 Shell跟java、php、Python编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。
Mac OS，Linux 自带了shell解释器，Windows比较麻烦，因为Win7专业版和旗舰版默认安装PowerShell，标准版和家庭版中就没有安装的，为了方便建议安装cygwin
PHP、Python 也可以作为Shell编程 PHP、Python是属于高级编程语言，但是也可以做Shell编程，因为只要有解释器，也可以用作脚本编程
如下是一个Python Shell Script示例（假设文件名叫op_python_base.py）：
#!/usr/bin/env python3 //告诉Python从系统环境中找python # -*- coding: utf-8 -*- //设置为UTF-8编码 for index in range(10): print(index); 源码：op_python_base
如下是一个PHP Shell Script示例（假设文件名叫op_php_base.php）：
#!/usr/bin/php &amp;lt;?php for($i=0 ;$i&amp;lt;10; $i++){ echo $i; } ?&amp;gt; 源码：op_php_base
为什么要学习Shell 既然PHP、Python都可以用来写脚本编程，那为什么还要学习陌生、晦涩难懂的Shell，主要有一下几个原因
  环境兼容性，Win7专业版和旗舰版默认安装PowerShell，标准版和家庭版中就没有安装的，其他主流的操作系统都预制了Shell解释器，所以使用sh、bash编写，提供给其他人使用是非常方便的，但是PHP、Python 等等需要安装相应的环境
  如果你想做一些定时任务比如说检测进程是否存在，自动备份，或者说自动部署环境、服务器之间的数据同步等等sh、bash会是你最好的选择
  sh与bash sh: Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh
bash: Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash
第一个shell脚本 我们先来看一个例子 我相信写过代码的童鞋，应该对下面的代码很熟悉并不陌生，（假设文件名叫op_base.sh）：</description>
    </item>
    
    <item>
      <title>Java 8 Lambda 表达式</title>
      <link>https://www.zhouyi.tech/archives/java-8-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/archives/java-8-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>什么是Lambda? 我们知道，对于一个Java变量，我们可以赋给其一个 “值”。
如果你想把 “一块代码” 赋给一个Java变量，应该怎么做呢？
比如，我想把右边那块代码，赋给一个叫做aBlockOfCode的Java变量：
在Java 8之前，这个是做不到的。但是Java 8问世之后，利用Lambda特性，就可以做到了。
当然，这个并不是一个很简洁的写法。所以，为了使这个赋值操作更加elegant, 我们可以移除一些没用的声明。
这样，我们就成功的非常优雅的把“一块代码”赋给了一个变量。而“这块代码”，或者说“这个被赋给一个变量的函数”，就是一个Lambda表达式。
但是这里仍然有一个问题，就是变量aBlockOfCode的类型应该是什么？
在Java 8里面，所有的Lambda的类型都是一个接口，而Lambda表达式本身，也就是”那段代码“，需要是这个接口的实现。 这是我认为理解Lambda的一个关键所在，简而言之就是，Lambda表达式本身就是一个接口的实现。直接这样说可能还是有点让人困扰，我们继续看看例子。我们给上面的aBlockOfCode加上一个类型：
这种只有 一个接口函数需要被实现的接口类型，我们叫它”函数式接口“。 为了避免后来的人在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成&amp;quot;非函数接口”，我们可以在这个上面加上一个声明@FunctionalInterface, 这样别人就无法在里面添加新的接口函数了：
这样，我们就得到了一个完整的Lambda表达式声明：
Lambda表达式有什么作用? 最直观的作用就是使得代码变得异常简洁。
我们可以对比一下Lambda表达式和传统的Java对同一个接口的实现：
这两种写法本质上是等价的。但是显然，Java 8中的写法更加优雅简洁。并且，由于Lambda可以直接赋值给一个变量，我们就可以直接把Lambda作为参数传给函数, 而传统的Java必须有明确的接口实现的定义，初始化才行：
有些情况下，这个接口实现只需要用到一次。传统的Java 7必须要求你定义一个“污染环境”的接口实现MyInterfaceImpl，而相较之下Java 8的Lambda, 就显得干净很多。
Lambda结合FunctionalInterface Lib, forEach, stream()，method reference等新特性可以使代码变的更加简洁！ 直接上例子。
假设Person的定义和List的值都给定。
现在需要你打印出guiltyPersons List里面所有LastName以&amp;quot;Z&amp;quot;开头的人的FirstName。
原生态Lambda写法：定义两个函数式接口，定义一个静态函数，调用静态函数并给参数赋值Lambda表达式。
这个代码实际上已经比较简洁了，但是我们还可以更简洁么？
当然可以。在Java 8中有一个函数式接口的包，里面定义了大量可能用到的函数式接口（java.util.function (Java Platform SE 8 )）。所以，我们在这里压根都不需要定义NameChecker和Executor这两个函数式接口，直接用Java 8函数式接口包里的Predicate和Consumer就可以了——因为他们这一对的接口定义和NameChecker/Executor其实是一样的。
第一步简化 - 利用函数式接口包：
静态函数里面的for each循环其实是非常碍眼的。这里可以利用Iterable自带的forEach()来替代。forEach()本身可以接受一个Consumer 参数。
第二步简化 - 用Iterable.forEach()取代foreach loop：
由于静态函数其实只是对List进行了一通操作，这里我们可以甩掉静态函数，直接使用stream()特性来完成。stream()的几个方法都是接受Predicate，Consumer等参数的（java.util.stream (Java Platform SE 8 )）。你理解了上面的内容，stream()这里就非常好理解了，并不需要多做解释。
第三步简化 - 利用stream()替代静态函数：</description>
    </item>
    
    <item>
      <title>10 Simple Ways to Build Residual Income in 2020</title>
      <link>https://www.zhouyi.tech/money/10-simple-ways-build-passive-income-2020.en/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/10-simple-ways-build-passive-income-2020.en/</guid>
      <description>Having a decent and stable job, a happy family, and a savings certificate that allows you to retire early are the aspirations of most people. Education, pension, housing&amp;hellip; All this makes us anxious.
Passive Income or residual income, that is &amp;ldquo;after sleeping income&amp;rdquo;! Warren buffett once said, &amp;ldquo;if you don&amp;rsquo;t find a way to make money while you sleep, you&amp;rsquo;ll work yourself to death.&amp;rdquo;
 (function() { var done = false; var script = document.</description>
    </item>
    
    <item>
      <title>我的财务管理方案</title>
      <link>https://www.zhouyi.tech/money/my-accounting-tool/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/my-accounting-tool/</guid>
      <description>自2012年2月9日14:05分用挖财记下第一笔帐后，至今已经持续了2888天（8年），这算是我坚持最久的一个习惯。
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();   为什么能坚持这么久？当你持续做一件事超过一个月时，就会下意识自动做。而且记账所花费的时间非常的少，当你花费一笔钱的时候，随手打开App花费1分钟时间就搞定了。
一般记账的类型可能有这么几种：
 日常生活帐：大额的会立即记录，小额的会几天几周之后做一个漏记款。 周期性帐：设置自动周期帐。 报销帐：需要报销的可以设置成报销帐。  为什么要记账 可能有人会想，为什么要记账了？总共就没多少钱，记不记都没啥影响，也不会让你变的更富有。
刚工作的前两年，我也没赚多少，但是看着上面的统计报表就算现在看来也会感觉记账是很值的。
个人/家庭财务规划 记账的另外一个很重要的功能是给个人/家庭财务规划做基础数据输入。在《玩CASHFLOW打造你的财务自由之路 》这篇文章中，每个玩家扮演一个角色，如下图：</description>
    </item>
    
    <item>
      <title>简单的投资策略为何能赚钱</title>
      <link>https://www.zhouyi.tech/money/why-simple-investment-strategies-make-money/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/why-simple-investment-strategies-make-money/</guid>
      <description>指数投资的威力 在《2019年金融投资总结》这篇文章中，我分享了使用ETF指数投资方法，其中有个点需要进一步分析，就是这种简单的投资方法竟然跑赢了华泰证券涨乐财富通App用户的94.4%的用户，具体看下图：
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();  这意味着什么？意味着这个策略躺赢了很多A股投资者。
为了做进一步分析，我们先研究下华泰证券涨乐财富通App的进一步信息。
根据一份《2019年6月份移动APPTOP1000榜单》1显示华泰证券（涨乐财富通）活跃人数为749.3万人，在券商App中排名第一，17家上榜券商的APP所有的活跃用户数相加为5396.4万人，而根据中国证券登记结算有限公司的期末投资者数量统计，截止2019年11月，自然人投资者为1.58亿2，进一步根据《华泰证券2019年半年度报告》3中披露:
以上信息可以分析出华泰证券用户量占A股自然人数量的10%，而其App的用户量占其客户的近90%，而我们的指数投资策略近一年跑赢其App用户的94%，这个成绩是非常不错的。
一个非常简单的投资策略却战胜了很多A股投资者，说明了不少人进股市是为了体验追涨杀跌的快感，这本身和赌博是很像的，要说服自己的投资能力不如股指是一件反人性的事情，这也是这个策略之所以能赚钱的原因。如果能用的人非常多的话，那这个策略反而会失效。我们赚的本质是人性弱点的钱。
可能很多人以为投资股票基金必须就是这样子才能赚钱的：
或者必须知道一些内幕交易才能赚钱：
  《亿万》讲述了对冲基金的内幕交易（五星推荐）   当你告诉他们很多专业的投资者甚至基金经理的投资业绩还不如一个指数的时候，他们很难相信这个事实。</description>
    </item>
    
    <item>
      <title>2019年金融投资总结</title>
      <link>https://www.zhouyi.tech/money/invest-review-2019/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/invest-review-2019/</guid>
      <description>2019年过去了，这一年A股的走势不错，虽然屡次突破3千大关无果，但是如果你从年前一直持有到现在的话，收益率大概是不会差的。
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();  这两年由于精力主要在技术的提升上，同时也因为买房的缘故，没有过多的时间和钱关注股市，所以我没有采用我之前建立的投资交易系统：在《构建你的交易系统》1，我分享了我在15-16年建立的股票交易系统，这是一套以仓位风险资金管理为核心的交易系统，整套系统的核心设计是通过给交易者提示目前的仓位风险状况，通过控制每笔交易金额的风险而建立止损点，整套系统的运行界面是这样的：
这套系统总的来说挺适合我的风格，但是由于需要投入很多时间去交易，记录交易日志，这套系统更适合资金大的专业的交易者，所以不适合目前我的情况，我转而采用了我在《年轻上班族的系统化投资之路》2中分享的ETF指数基金投资法，这是一套以指数历史估值为核心的投资交易系统，特点就是几乎不怎么耗费你的时间，适合上班族业余投资玩家。
所以我在2018年09月20日开始建仓：
目前的持仓是这样子的：
中途因为需要钱而卖出一部分，交易记录：
中途只操作过两次，其他再无操作。收益率是这样子的：
光看自己的组合收益率并不能说明问题，我们还需要和大盘的其他指数做个对比：
组合分析 其实这个组合从收益率看和沪深300的指数的走势相当，比上证指数、中证1000、中证500、上证50都要高一些，比创业板要低一些。总体来说这个投资策略跟踪指数，收益率也会介于各类指数之间，因为也没有杠杠，操作的成本非常的低，也不会浪费你的时间，只要看多中国，看多未来的A股，通过这种投资方式是可以享受到国家生产力提升的红利的。
在华泰涨乐财富通App中收益率排名为超过94%的用户，根据一份《2019年6月份移动APPTOP1000榜单》3显示华泰证券（涨乐财富通）活跃人数为749.3万人，在券商App中排名第一，17家上榜券商的APP所有的活跃用户数相加为5396.4万人，而根据中国证券登记结算有限公司的期末投资者数量统计，截止2019年11月，自然人投资者为1.58亿4，进一步根据《华泰证券2019年半年度报告》5中披露:
以上信息可以分析出华泰证券用户量占A股自然人数量的10%，而其App的用户量占其客户的90%不到，而我们的指数投资策略近一年跑赢其App用户的94%，这说明什么问题？
一个非常简单的投资策略却战胜了很多A股投资者，说明了不少人进股市是为了体验追涨杀跌的快感，这本身和赌博是很像的，要说服自己的投资能力不如股指是一件反人性的事情，这也是这个策略之所以能赚钱的原因。如果能用的人非常多的话，那这个策略反而会失效。我们赚的本质是人性弱点的钱。</description>
    </item>
    
    <item>
      <title>玩信用卡的各种姿势</title>
      <link>https://www.zhouyi.tech/money/use-credit-card-in-various-ways/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/use-credit-card-in-various-ways/</guid>
      <description>现代社会的经济基础体系运转在信贷之上，央行并不需要发行那么多货币而是通过产生信贷去满足社会经济的需求。信用卡正是顺应这种需求而被创造出来。
20世纪50年代，第一张针对大众的信用卡出现，美国曼哈顿信贷专家麦克纳马拉（Frank McNamara）在饭店用餐，由于没有带足够的钱，只能让太太送钱过来。这让他觉得很狼狈，于是组织了“食客俱乐部”（英语：Diners Club，即为大来卡），任何人获准成为会员后，带一张就餐记账卡到指定27间餐厅就可以记账消费，不必付现金，这就是最早的信用卡。（引用自Wikipedia）
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();  信用卡基本知识 信用卡组织 国际上主要的全球信用卡发卡组织有六家：
VISA（威士）：成立于1958年，是一个拥有2万1千家金融机构会员所组成的联盟组织，本身并不发行Visa卡，而是由Visa国际组织的会员银行发行Visa卡。
MasterCard（万事达）：成立于1966年，是一个拥有超过2万5千家金融机构会员组成的联盟组织。
American Express（美国运通）：成立于1850年，主要业务是信用卡、签账卡（charge card）以及旅行支票。
China UnionPay（中国银联）：成立于2002年，是经央行批准成立的一个股份制金融服务机构。提供银联在线支付、银联手机支付、闪付等产品和服务。</description>
    </item>
    
    <item>
      <title>小白的交易之路</title>
      <link>https://www.zhouyi.tech/money/road_to_trading/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/road_to_trading/</guid>
      <description>(function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();   (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.</description>
    </item>
    
    <item>
      <title>年轻上班族的系统化投资之路</title>
      <link>https://www.zhouyi.tech/money/investment-path-for-young/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/investment-path-for-young/</guid>
      <description>余额宝的出现唤醒了很多人的投资意识，于是近年互联网金融火了起来。但是投资不只是用钱买入某款宝或者各类P2P这么简单，如何系统化的去长期投资使财富不断增值是个值得我们花时间去解决的问题。
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();  确定投资目标 投资理财是一个很大的主题。投资和理财本身是有差别的：投资更注重收益率，而理财更注重规划性。举个例子，炒股（当然大多是在投机交易）一般来说都很注重投资收益率；为买房或者子女教育储备资金的方式算是理财规划的一种。
我们区分投资和理财很重要的一点是要你明白目标的重要性。如果你的目标只是想赚更多更多的钱，那这个目标本身就是不可实现的。在开始之前你必须要确定一个目标，然后结合自身情况制定计划来实现它。
本文的关键词是“年轻”、“上班族”、“系统化”、“低风险”、“长期投资”。所以我们先明确下问题域：
  年轻。这意味着没多少积蓄，初始可投入资金很少。也意味着无法做短线交易，就算短期技术年收益率可达100%（对短线交易来说已经很高了），真正的资金收益也没多少钱，所以只能采取长期投资这种方式了。
  上班族。这意味着没多少时间可投入到学习理财知识和关注市场行情上来。所以需要采取一种不需要关注市场可简单操作执行计划的理财方式。
  系统化。对于长期的理财方式来说，系统规划很重要，因为短期看不到收益，所以需要你理解它的运行逻辑，这样才能系统化的长期执行它。</description>
    </item>
    
    <item>
      <title>玩CASHFLOW打造你的财务自由之路</title>
      <link>https://www.zhouyi.tech/money/play-cashflow-to-build-your-financial-freedom/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/play-cashflow-to-build-your-financial-freedom/</guid>
      <description>玩CASHFLOW的启示 CASHFLOW（现金流游戏）是罗伯特·清崎发明于20世纪90年代的一款卡片游戏，它通过你的资产负债表和收支平衡表的变化，告诉你金钱运动的规律。可是这款游戏在发明后，很多人都不会玩，所以作者编写了一本书来介绍此款游戏的设计理念，这本书就是非常有名的《富爸爸，穷爸爸》。
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();  在上个周末的时候，我和朋友S及Y一块花了五个小时玩了一把这款游戏的卡片版（也有电脑版，不过卡片版才是游戏的精髓，因为需要你自己计算你的财务报表）。
这款游戏的卡片赛道如下图：
每个玩家拥有一张初始职业卡，如下图：
游戏中有机会抽到四种卡片，如右下角的小生意卡，右上角的市场风云卡，左上角的大机会卡，左下角的额外支出卡。当然每种卡片又有很多类型的。
游戏中最重要当属每个玩家要填写的财务报表了。财务报表有三大块：收入支出表、资产负债表及现金流量表。游戏的目标就是通过各种投资机会使你的被动收入大于总支出，意味着你无需工作通过被动收入即可满足你的生活支出，这也是财务自由的定义。
游戏中我的职业是程序开发员，这是游戏最后我的最终财务报表：
Y的职业是教师，这是她的最终财务报表：
在游戏设定中你在未发生破产前都可以向银行无限贷款，只不过利息每月有10%，意味着年化利息120%，这是游戏设定的银行利息，相应的各类投资收益都和现实不同，不过也是非常高的利息了。
游戏刚开始时，我的职业是高薪的程序开发，S的职业是网络工程，Y的职业是教师。三者之中我的收入和支出都是非常高的，而且每月结余的现金流也是最多的。因为我的银行存款现金比较多，一开始时我只能做小生意买一些便宜的股票，所以很快我花了很多现金买了不少的云南白药股票，历史最高价有50元，我的成本价在11元之间。如果市场中云南白药可以到40-50元的话，我大概可以赚不到10万元，这样我就可以做大买卖来投资房地产了，当然这是我只是我的计划，我在等市场给我机会。
S的月结余现金不多，但是他非常幸运的拿到了一个以1元1股来购买原始股的机会，很快市场给他了卖出机会，一次套现了10万元，拿到了大量现金的他接着就偿还了高利息的信用卡负债和银行贷款，接着去投资房地产。因为他这个职业的总支出少，很快就积累了高于总支出的非工资收入（被动收入），实现了财务自由进入了快车道。
Y在整个游戏前期只拿每月的现金流。由于她的职业收入和支出都很少，所以她也很少去投资。但是就这样简朴的过日子，到了游戏中期她积累了一大笔银行存款，比我和S的现金都多，那时我和Y的手头有很多股票，所以现金反而很少。</description>
    </item>
    
    <item>
      <title>构建你的交易系统</title>
      <link>https://www.zhouyi.tech/money/build-trade-system/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/money/build-trade-system/</guid>
      <description>交易日记App可帮你构建个人交易系统。它同时可管理多个实盘组合，并对每笔股票基金交易记录进行量化分析，控制组合持仓资金风险；历史交易日记可帮你形成良好的交易习惯，逐步提高交易决策能力；市场估值、交易策略及资产配置可帮你择时选股，制定交易计划，减少决策时间，提高交易胜率。
下载链接：
 http://diary.trade
 使用帮助 交易日记APP功能介绍
https://v.qq.com/txp/iframe/player.html?vid=i0302w125p1
 (function() { var done = false; var script = document.createElement(&#39;script&#39;); script.async = true; script.type = &#39;text/javascript&#39;; script.src = &#39;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#39;; var createScript = setTimeout( function(){ document.getElementsByTagName(&#39;HEAD&#39;).item(0).appendChild(script); }, 5000 ); script.onreadystatechange = script.onload = function(e) { if (!done &amp;&amp; (!this.readyState || this.readyState == &#39;loaded&#39; || this.readyState == &#39;complete&#39;)) { (adsbygoogle = window.adsbygoogle || []).push({}); } }; })();  产品特性 组合管理-可管理多个实盘组合，设置买入股票或基金的止损和目标价格，自动提醒当前持仓是否可卖。
风险管理-通过胜率、盈亏比、风险资金、回撤幅度等指标了解当前组合潜在风险情况。
交易日记-自动编写交易日记并分析每笔历史交易，评估你的买入与卖出得分，帮助你形成良好的交易习惯。
市场估值*-通过计算全市场PE&amp;amp;PB来标明当前市场风险，帮你制定ETF定投计划。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://www.zhouyi.tech/about.en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/about.en/</guid>
      <description>work like a slave command like a king create like a god This is my resume.</description>
    </item>
    
    <item>
      <title>Friend Links</title>
      <link>https://www.zhouyi.tech/link.en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/link.en/</guid>
      <description>         Martin Fowler Software Development   My bad opinions Erlang/FP   ahrefs blog SEO   Indie Hackers Build Online Businesses    </description>
    </item>
    
    <item>
      <title>My Long Term Goal</title>
      <link>https://www.zhouyi.tech/goal.en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/goal.en/</guid>
      <description>My Life Goal  TECHNOLOGY CREATION、 INVESTMENT TRANSACTIONS POSITIVELY INFLUENCE OTHERS BE INDEPENDENT AND DO WHAT I LIKE  My Ten Years Goal（2020-2030）  ESTABLISH INVESTMENT TRADING SYSTEM (15% COMPOUND ANNUAL RETURN) ESTABLISH A PERSONAL DOMAIN BRAND (INVESTMENT TRANSACTION / WEBSITE COMMUNITY / MAILING LIST) INCREASING PASSIVE INCOME (CREATION INCOME / TRADING SYSTEM INCOME / EXTRA PROJECT INCOME)  </description>
    </item>
    
    <item>
      <title>My Recommend Things</title>
      <link>https://www.zhouyi.tech/affiliate.en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/affiliate.en/</guid>
      <description>Server &amp;amp;&amp;amp; Domain    Vultr      Namecheap   VPN Main is Blinkload ，backup is JMS</description>
    </item>
    
    <item>
      <title>My Tools</title>
      <link>https://www.zhouyi.tech/tool.en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/tool.en/</guid>
      <description>My GTD Tool          Post My GTD Tool   Mail Notify Starter todo_starter   VSCode Extension Todo++    </description>
    </item>
    
    <item>
      <title>Side Project</title>
      <link>https://www.zhouyi.tech/project.en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/project.en/</guid>
      <description>GitHub Top X gitopx.com
Web Telegram webtg.org
Ins Web Traffic Site https://github.com/bmpi-dev/instaghub</description>
    </item>
    
    <item>
      <title>关于本站</title>
      <link>https://www.zhouyi.tech/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/about/</guid>
      <description>关于本站  个人技术博客站点，用于记录平时所学，分享编程心得。本人文笔拙劣，没有太多华丽的辞藻，也写不出跌宕起伏的故事，所以平时也少有记录文章的习惯。但是，工作几年来发现，书看了一些，知识也接触了很多，但是有些知识或者技术，并不是经常能用到，时间一久就生疏甚至遗忘。所以希望通过本站，让自己把所学都能记录下来，对知识做一个梳理。同时也会转载一些本人认为比较好的文章，统一收藏。如果，本站的文章能给在看的您带来或多或少的收获，那我便会感到无比欣慰。
关于版权  本站所有标注为原创的文章，转载请标明出处； ​ ​ 本站所有转载的文章，一般都会在文章中注明原文出处； ​ ​ 所有转载的文章皆来源于互联网，如文章内容侵犯到任何版权问题, 烦请原作者立即告知本站(邮箱: 917863506@qq.com 或 QQ: 917863506), 本站将及时予以删除并致以最深的歉意；
 本站部分内容转载自其它媒体，但并不代表本站赞同其观点和对其真实性负责，不承担任何技术及版权问题。</description>
    </item>
    
    <item>
      <title>友情链接</title>
      <link>https://www.zhouyi.tech/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/link/</guid>
      <description>朋友们的博客          DHTalk&amp;rsquo;s Blog Stay hungry Stay foolish   Indie Hackers 独立开发者   食灯鬼 人生意何存，我思故我在   GeekPlux Data Visualization &amp;amp; Full-stack programmer   Future iDeal 网络营销之路   ZoomQuiet 是也乎(￣▽￣)   认知.xKnow 认知.xKnow   朱双印个人日志 朱双印个人日志    我关注的博客          面向信仰编程 Go语言设计与实现   酷壳 享受编程和技术所带来的快乐   英文SEO实战派 英文SEO    </description>
    </item>
    
    <item>
      <title>我的个人项目</title>
      <link>https://www.zhouyi.tech/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/project/</guid>
      <description>系列写作          被动收入投资组合 15年长期投资/15%年复合收益率/25万+到200万+   投资实证 我的投资交易策略及年度金融投资报告   自我提升 交易/财务/写作/笔记/时间，五个系统维度助我不断成长   SEO实践日志 记录我的SEO学习实践过程   零成本搭建现代博客指南 记录从零开始以零成本打造现代SEO友好架构的博客网站    产品/工具          Invest Alchemy 被动收入投资助手   scrape_google_keyword 刮取Google关键词Top10排名网站信息   tg2web 电报频道静态化工具   git2pdf 打印GitHub README文档    流量站          gitopx.</description>
    </item>
    
    <item>
      <title>我的好物推荐</title>
      <link>https://www.zhouyi.tech/affiliate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/affiliate/</guid>
      <description>如果对我推荐的东西感觉不错，请使用下面的链接购买，我会获得一定的返佣，非常感谢。 这种模式在国外称之为Affiliate Network（联盟营销）/ CPS，也就是我们常说的的推广链接。 我在用的服务器与域名    Vultr      Namecheap   我在用的机场/梯子  如果你的网络上不了Google/YouTube/Twitter，那你就需要一个机场或梯子，它能去除那股神秘的力量，助你正常上网
 主用 Blinkload ，备用 JMS
我在用的键盘 吃灰中的 HHKB
我推荐的课程 Python           蟒营™ Python 入门班 由专注 Python 实践推广 17 年的 Zoom.Quiet 亲自授课。只要坚持 6 周，以后再也不用购买任何网课，就能自学任何实用技能。🐍蟒营™Reactivate Joy by Self-tech with You 推荐写 bmpi.dev 享受 85 折优惠    我心目中的好书 投资类  走进我的交易室 海龟交易法则 低风险投资之路 股票作手操盘术+股票作手回忆录 一个交易者的资金管理系统 Trading System Definitive Guide To Position Sizing Building Winning Algorithmic Trading Systems  编程类  计算机程序的构造与解释 算法4 重构2 程序员的数学1+2+3 SEO艺术3 修改代码的艺术 Clean Code 深度学习入门-基于Python的理论与实现 Elixir 程序设计  综合类  美国史 社会心理学 中国国家治理的制度逻辑 全球通史 奇特的一生  </description>
    </item>
    
    <item>
      <title>我的工具清单</title>
      <link>https://www.zhouyi.tech/tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/tool/</guid>
      <description>Inbox Notion
微信Markdown排版工具          相关文章 用Markdown可以做什么   工具链接 微信Markdown排版工具    我的时间/任务管理工具          相关文章 我的时间管理工具VSCode插件开发小记Parser黑魔法   邮件提醒模版 todo_starter   VSCode插件 Todo++    </description>
    </item>
    
    <item>
      <title>我的长期目标</title>
      <link>https://www.zhouyi.tech/goal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhouyi.tech/goal/</guid>
      <description>我的愿景  认知升级：通过认知升级去理解未知的世界，最终赚钱。 长期主义：坚持做有长期收益的事情，比如写作、记账与投资等。 积极影响他人：通过分享经验与他人建立有效连接，创造新的机会。  长期目标  2020 - 2030  投资交易年复合回报率达 15% 以上 建立领域个人影响力  技术 投资   被动收入总收入 50% 以上  创作 投资 副业      </description>
    </item>
    
  </channel>
</rss>
